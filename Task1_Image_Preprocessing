import pandas as pd
import numpy as np

from glob import glob

import cv2 
import matplotlib.pylab as plt


# reading in images
dog_file = glob(r"C:\Users\User\Desktop\University\Bachelor\Intelligent System\Project option B\Task1\picture\dog\*.jpeg")
cat_file = glob(r'C:\Users\User\Desktop\University\Bachelor\Intelligent System\Project option B\Task1\picture\cat\*.webp')
hand_file = glob(r'C:\Users\User\Desktop\University\Bachelor\Intelligent System\Project option B\Task1\picture\handWritten\*.webp')

# print(dog_file[0])
# print(cat_file[0])

img_mpl_dog = plt.imread(dog_file[0])
img_cv2_dog = cv2.imread(dog_file[0])
img_mpl_cat = plt.imread(cat_file[0])
img_cv2_cat = cv2.imread(cat_file[0])
img_mpl_hand = plt.imread(hand_file[0])
img_cv2_hand = cv2.imread(hand_file[0])

# print(img_mpl.shape)
# print(img_cv2.shape)
# print(img_mpl.max())

# # visualize the brightness distribution
# pd.Series(img_mpl.flatten()).plot(
#     kind = 'hist',
#     bins = 50,
#     title = 'Distribution of Pixel Values'
# )
# plt.show()

# # Display images
# fig, ax = plt.subplots(figsize=(10, 10))
# ax.imshow(img_mpl) # draw image on the Axes
# ax.axis('off') #remove axis
# plt.show() # renders the figure  

# # Display RGB Channels of out image
# fig, axs = plt.subplots(1, 3, figsize=(15, 5))
# axs[0].imshow(img_mpl[:, :, 0], cmap='Reds')
# axs[1].imshow(img_mpl[:, :, 0], cmap='Greens')
# axs[2].imshow(img_mpl[:, :, 0], cmap='Blues')
# #turn the axis off
# axs[0].axis('off')
# axs[1].axis('off')
# axs[2].axis('off')
# # set the title
# axs[0].set_title('Red channel')
# axs[1].set_title('Green channel')
# axs[2].set_title('Blue channel')
# plt.show()

# # matplotlib vs cv2
# img_cv2_rgb = cv2.cvtColor(img_cv2, cv2.COLOR_BGR2RGB) # convert color
# fig, axs = plt.subplots(1, 2, figsize=(10, 5))
# axs[0].imshow(img_cv2_rgb)
# axs[1].imshow(img_mpl)
# axs[0].axis('off')
# axs[1].axis('off')
# axs[0].set_title('CV Image')
# axs[1].set_title('Matplotlib Image')
# plt.show()

## Image Manipulation - Gray scaling ##
# dog_gray = cv2.cvtColor(img_mpl_dog, cv2.COLOR_RGB2GRAY)
# cat_gray = cv2.cvtColor(img_mpl_cat, cv2.COLOR_RGB2GRAY) # Gray Scaling tecnique
# fig, axs = plt.subplots(1, 2, figsize=(8, 8))
# axs[0].imshow(dog_gray, cmap='Greys')
# axs[1].imshow(cat_gray, cmap='Greys')
# axs[0].axis('off')
# axs[1].axis('off')
# axs[0].set_title('Dog Grey Image')
# axs[1].set_title('Cat Grey Image')
# plt.show()

#resize image to 28 x 28
hand_resized = cv2.resize(img_mpl_hand, None, fx=0.28, fy=0.28)

#covert image to gray
hand_gray = cv2.cvtColor(img_mpl_hand, cv2.COLOR_RGB2GRAY)

# Normalization image by convert pixel values 0–255 → 0–1
normalized_img_re = hand_resized / 255.0

fig, axs = plt.subplots(1, 4, figsize=(15, 5))
axs[0].imshow(img_mpl_hand)
axs[1].imshow(hand_resized)
axs[2].imshow(hand_gray, cmap='Greys')
axs[3].imshow(normalized_img_re, cmap='gray');

## remove axis line
axs[0].axis('off')
axs[1].axis('off')
axs[2].axis('off')
axs[3].axis('off')

#set title for image
axs[0].set_title('Original Image')
axs[1].set_title('Resizing Image')
axs[2].set_title('Grayscaling Image')
axs[3].set_title('Normalized Image X Resize')


#display the outout in another window
plt.show()
